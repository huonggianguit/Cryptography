package com.sn.SrvFinance.server;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.cj.xdevapi.Client;
import com.sn.SrvFinance.mySQL.SqlConnection;
import com.sn.SrvFinance.mySQL.SqlResultSet;
import com.sn.SrvFinance.network.handler.IMessageReceiver;
import com.sn.SrvFinance.network.io.Message;
import com.sn.SrvFinance.network.session.ISession;
import com.sn.SrvFinance.network.session.Session;
import com.sn.SrvFinance.server.io.MySession;
import com.sn.SrvFinance.services.Service;
import com.sn.SrvFinance.user.User;
import org.mindrot.jbcrypt.BCrypt;

import javax.swing.filechooser.FileSystemView;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Controller implements IMessageReceiver {
    private  static Controller instance;
    public static Controller gI() {
        if (instance == null) {
            return new Controller();
        }
        return instance;
    }
    @Override
    public void onMessage(ISession s, Message msg) {
        if(s==null) {
            System.out.println("Session is null");
            return;
        }
        if(msg==null) {
            System.out.println("msg is null");
            return;
        }
        MySession session = (MySession) s;
        byte cmd = msg.cmd;
        byte subCmd = msg.subCmd;
        if(cmd == 6){
            /* cmd 6 == Check Key. v√† x·ª≠ l√Ω login
            + Server m·ªü c·ªïng = public, ph√≤ng th·ªß ch·ªï n√†y, Client ch·ª©a 1 key , check Key N·∫øu key sai ch·∫°y cmd block ip
            + ƒêƒÉng nh·∫≠p th√†nh c√¥ng, Add Session v√†o User ƒë·ªÉ c√≥ th·ªÉ ch·∫°y ƒëa n·ªÅn t·∫£ng.
            +
             */
            if(subCmd==0){
                String key = msg.readUTF();
               // System.out.println("key:"+key);
                if (key.equals(ServerManager.keyClient)){
                    session.isActive = true;
                   // System.out.println("CHUY√äN C·ªú:");
                } else{
                    ClientManager.gI().kickSession(session);
                   // System.out.println("X√ìA SESSION 1");
                }
            }else{
                if(!session.isActive){
                    ClientManager.gI().kickSession(session);
                  //  System.out.println("X√ìA SESSION 2");
                    return;
                }
                switch(subCmd){
                    case 1 -> {
                        /*Login, User v√† Password g·ª≠i l√† h√†ng read, ƒë·ªÉ trong ram (ƒë·ªÉ trong buffer, ko l·∫•y bi·∫øn t·∫°m ra d·ªÖ b·ªã tr√≠ch xu·∫•t)
                        *  User ƒê·ªçc UTF check trong SQL xong r·ªìi l·∫•y has password, has n√†y l√† has BCrypt, V√¨ sao d√πng has n√†y v√¨ m·∫•y th·∫±ng md5... hi·ªán t·∫°o ko an to√†n
                        * Nghe n√≥i th·∫ø, ch·ª© ko hi·ªÉu n√≥ d√≤ ki·ªÉu g√¨ ·∫£o ma. M√† hi·ªán t·∫°i th·∫•y m·∫•y web kia h·ªç to√†n x√†i BCrypt, n√™n x√†i.
                        * Password s·∫Ω ƒë∆∞a v√†o 1 h√†m ƒë·ªÉ case has so s√°nh lu√¥n, n·∫øu so s√°nh chu·∫©n, th√¨ ƒëƒÉng nh·∫≠p dc, ko th√¨ ko ƒëƒÉng nh·∫≠p dc
                        * L√†m v·∫≠y ƒë·ªÉ l√†m g√¨? V√¨ M·ª•c ƒë√≠ch l√†m Server n√†y l√† n∆°i ch·ª©a d·ªØ li·ªáu tr√™n SQL< ngay c·∫£ khi SQL b·ªã leak th√¨ v·∫´n ko th·ªÉ c√≥ ƒë∆∞·ª£c data th·∫≠t.
                        * SQL l∆∞u passwork hash, Client g·ª≠i pass real qua check. Nh∆∞ v gi·∫£ ƒë·ªãnh c√≥ dc hash pass trong SQL c≈©ng ko th·ªÉ ƒëƒÉng nh·∫≠p t·ª´ client kh√°c dc.
                        * Sau ƒë√≥ c√≥ th·ªÉ d√πng passwork l√†m key SSE lu√¥n, v√† m·ªçi raw g·ª≠i s·∫Ω l∆∞u header l√† id user v√† raw l√† ƒë√£ m√£ h√≥a SSE
                        * K·∫øt h·ª£p vs sinh c√°i g√¨ ƒë·∫•y m·ªói l·∫ßn g·ª≠i raw m√£ h√≥a SSE v√† l∆∞u c√°i ƒë√≥ l·∫°i th√¨ ko b·ªã tr√≠ch xu·∫•t l√† search c√°i g√¨ ƒë·ªÉ c√≥ th√™m th√¥ng tin d√≤.
                        * */
                        DoLogin(session,msg);
                    }
                    case 2 -> {
                        DoRegister(session,msg);
                    }
                }
            }

        }
        if(!session.isActive){
            ClientManager.gI().kickSession(session);
        }

        User user = session.user;
        if(user==null) {
            System.out.println("user is null");
           // ClientManager.gI().kickSession(session);
        }
        switch (cmd){
//            case 7 -> { //G√≥i tin nh·∫≠n FirtToken +  file
//                switch (subCmd){ //c√≥ payloadSize l√† 2 byte (max) 64kb
//                    case 0 -> { // G·ª≠i file + Token Search ƒë·∫ßu ti√™n
//                        String tokenFirst = toHexString(msg.readBytes(32));
//                        int FileIdLength = msg.readUnsignedByte();
//                        String FileID = toHexString(msg.readBytes(FileIdLength));
//                        int rawLength =msg.readUnsignedShort();
//                        byte[] raw = msg.readBytes(rawLength);
//
//                    }
//                    case 1 -> {// G·ª≠i fileID + List Token Search
//                        String tokenFirst = toHexString(msg.readBytes(32));
//                        int FileIdLength = msg.readUnsignedByte();
//                        String FileID = toHexString(msg.readBytes(FileIdLength));
//                        int rawLength =msg.readUnsigned24();
//                        byte[] raw = msg.readBytes(rawLength);
//                        AddFileFirstToken(user,tokenFirst,FileID,raw);
//                    }
//                }
//            }
//            case 8 -> { // G·ª≠i fileID + list Token
//                switch (subCmd) {
//                    case 0 -> {
//                        int FileIdLength = msg.readUnsignedByte();
//                        String FileID = toHexString(msg.readBytes(FileIdLength));
//                        int rawLength =msg.readUnsignedShort();
//                        List<String> listToken= new ArrayList<>();
//                        for(int i=0;i<rawLength;i++){
//                            listToken.add(toHexString(msg.readBytes(32)));
//                        }
//                        AddListToken(user,FileID,listToken);
//                    }
//
//                }
//            }
            case 7 -> { // G√≥i tin nh·∫≠n FirstToken + file
                switch (subCmd) {
                    case 0 -> { // G·ª≠i file + Token Search ƒë·∫ßu ti√™n (64KB)
                        String tokenFirst = toHexString(msg.readBytes(32));
                        int FileIdLength = msg.readUnsignedByte();
                        String FileID = toHexString(msg.readBytes(FileIdLength));
                        int rawLength = msg.readUnsignedShort();
                        byte[] raw = msg.readBytes(rawLength);

                        System.out.println("üì¶ [CMD 7 - subCmd 0] Nh·∫≠n File + FirstToken");
                        System.out.println("üîë TokenFirst: " + tokenFirst);
                        System.out.println("üÜî FileID: " + FileID);
                        System.out.println("üìÑ rawLength: " + rawLength);
                        System.out.println("üìÑ rawBytes: " + raw.length);
                        AddFileFirstToken(user, tokenFirst, FileID, raw);
                    }
                    case 1 -> { // G·ª≠i file + FirstToken (16MB)
                        String tokenFirst = toHexString(msg.readBytes(32));
                        int FileIdLength = msg.readUnsignedByte();
                        String FileID = toHexString(msg.readBytes(FileIdLength));
                        int rawLength = msg.readUnsigned24();
                        byte[] raw = msg.readBytes(rawLength);

                        System.out.println("üì¶ [CMD 7 - subCmd 1] Nh·∫≠n File + FirstToken (16MB)");
                        System.out.println("üîë TokenFirst: " + tokenFirst);
                        System.out.println("üÜî FileID: " + FileID);
                        System.out.println("üìÑ rawLength: " + rawLength);
                        System.out.println("üìÑ rawBytes: " + raw.length);

                        AddFileFirstToken(user, tokenFirst, FileID, raw);
                    }
                }
            }
            case 8 -> { // G·ª≠i fileID + list Token
                switch (subCmd) {
                    case 0 -> {
                        int FileIdLength = msg.readUnsignedByte();
                        String FileID = toHexString(msg.readBytes(FileIdLength));
                        int tokenCount = msg.readUnsignedShort();

                        List<String> listToken = new ArrayList<>();
                        System.out.println("üì¶ [CMD 8 - subCmd 0] Nh·∫≠n List Token cho File");
                        System.out.println("üÜî FileID: " + FileID);
                        System.out.println("üî¢ TokenCount: " + tokenCount);

                        for (int i = 0; i < tokenCount; i++) {
                            String token = toHexString(msg.readBytes(32));
                            listToken.add(token);
                            System.out.println("   üîπ Token[" + i + "]: " + token);
                        }
                        AddListToken(user, FileID, listToken);
                    }
                    case 1 ->{
                        int FileIdLength = msg.readUnsignedByte();
                        String FileID = toHexString(msg.readBytes(FileIdLength));
                        int tokenCount = msg.readUnsignedShort();
                        List<String> listToken = new ArrayList<>();
                        for (int i = 0; i < tokenCount; i++) {
                            String token = toHexString(msg.readBytes(32));
                            listToken.add(token);
                        }
                        userDownFile(user, FileID,listToken);
                    }
                }
            }
            case 9 ->{
                switch (subCmd) {
                    case 0 -> {
                        String token = toHexString(msg.readBytes(32));
                        userSearchToken(user, token);
                    }
                }
            }
        }
    }

    private void DoLogin(MySession s, Message msg) {
        SqlResultSet rs = null;
        try {
            String username = msg.readUTF();
            String password = msg.readUTF();
            rs = SqlConnection.executeQuery("select * from users where username = ?", username);
            if (rs.first()) {
                String passHash = rs.getString("password");
                boolean result = BCrypt.checkpw(password, passHash);
                if (result) {
                    long id = rs.getLong("id");
                    if(ClientManager.gI().hasUser(id)){
                        s.user.setId(id);
                        ClientManager.gI().getUser(id).addSession(s);
                    } else {
                        User us = new User();
                        us.setId(id);
                        us.setUsername(username);
                        us.addSession(s);
                        if(s.user!=null){
                            s.user = null;
                        }
                        s.user = us;
                        ClientManager.gI().addUser(id, us);
                    }
                    Service.gI().sendMessLogin(s,true);
                  //  System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + username + " id: " + id);
                } else {
                    System.out.println("G·ª≠i msg Login");
                    Service.gI().sendMessLogin(s,false);
                  //  System.out.println("‚ùå Sai m·∫≠t kh·∫©u (checkpw false)");
                }
            } else {
                Service.gI().sendMessLogin(s,false);
              //  System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user: " + username);
            }
        } catch (Exception e) {
            System.out.println("‚ÄºÔ∏è Exception trong DoLogin:");
            e.printStackTrace();
        }
    }
    public void DoRegister(MySession s, Message msg) {
        SqlResultSet rs = null;
        try {
            String username = msg.readUTF();
            String password = msg.readUTF();
            rs = SqlConnection.executeQuery("select * from users where username = ?", username);
            if (rs.first()) {
                Service.gI().sendMessRegister(s, false);
                return;
            } else
            {
                String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
                SqlConnection.executeInsert(
                        "INSERT INTO users (username, password) VALUES (?, ?)",
                        username, hashedPassword
                );
                Service.gI().sendMessRegister(s, true);
            }
        } catch (Exception e) {
            System.out.println("‚ÄºÔ∏è Exception trong DoLogin:");
            e.printStackTrace();
        }
    }


    public void AddFileFirstToken(User uc, String TokenFirst, String fileID, byte[] rawFile) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            System.out.println("üì• AddFileFirstToken:");
            System.out.println("üîë TokenFirst: " + TokenFirst);
            System.out.println("üÜî FileID: " + fileID);
            System.out.println("üë§ UserID: " + uc.getId());
            System.out.println("üìÑ rawFile.length: " + rawFile.length);

            SqlResultSet rs = SqlConnection.executeQuery(
                    "SELECT * FROM encryptedindex WHERE token = ?", TokenFirst
            );

            if (!rs.first()) {
                System.out.println("üÜï Token ch∆∞a c√≥ trong DB ‚Üí t·∫°o m·ªõi");
                String jsonArray = mapper.writeValueAsString(List.of(fileID));
                SqlConnection.executeInsert(
                        "INSERT INTO encryptedindex (token, file_id, user_id) VALUES (?, ?, ?)",
                        TokenFirst, jsonArray, uc.getId()
                );
            } else {
                System.out.println("‚úÖ Token ƒë√£ c√≥ trong DB ‚Üí ki·ªÉm tra c·∫≠p nh·∫≠t fileID");
                String fileIdJson = rs.getString("file_id");
                List<String> fileList;

                if (fileIdJson != null && !fileIdJson.isEmpty()) {
                    fileList = mapper.readValue(fileIdJson, new TypeReference<List<String>>() {});
                } else {
                    fileList = new ArrayList<>();
                }

                if (!fileList.contains(fileID)) {
                    fileList.add(fileID);
                    String updatedJson = mapper.writeValueAsString(fileList);
                    SqlConnection.executeUpdate(
                            "UPDATE encryptedindex SET file_id = ? WHERE token = ?",
                            updatedJson, TokenFirst
                    );
                    System.out.println("üìù ƒê√£ th√™m m·ªõi fileID v√†o danh s√°ch token");
                } else {
                    System.out.println("‚ö†Ô∏è fileID ƒë√£ t·ªìn t·∫°i trong danh s√°ch ‚Üí kh√¥ng th√™m l·∫°i");
                }
            }

            File desktopDir = FileSystemView.getFileSystemView().getHomeDirectory();
            String desktopPath = desktopDir.getAbsolutePath();

            File folder = new File(desktopDir, "DataServerDoAn");
            if (!folder.exists()) {
                folder.mkdirs();
                System.out.println("üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: " + folder.getAbsolutePath());
            }

            File outFile = new File(folder, fileID);
            try (FileOutputStream fos = new FileOutputStream(outFile)) {
                fos.write(rawFile);
                System.out.println("‚úÖ Ghi file th√†nh c√¥ng: " + outFile.getAbsolutePath());
            }

        } catch (Exception e) {
            System.err.println("‚ÄºÔ∏è L·ªói trong AddFileFirstToken:");
            e.printStackTrace();
        }
    }
    public void AddListToken(User uc, String fileID, List<String> tokenList) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            System.out.println("üì• AddListToken:");
            System.out.println("üÜî FileID: " + fileID);
            System.out.println("üë§ UserID: " + uc.getId());
            System.out.println("üî¢ T·ªïng s·ªë token: " + tokenList.size());
            for (String token : tokenList) {
                SqlResultSet rs = SqlConnection.executeQuery(
                        "SELECT * FROM encryptedindex WHERE token = ?", token
                );
                if (!rs.first()) {
                    System.out.println("üÜï Token m·ªõi ‚Üí t·∫°o m·ªõi: " + token);
                    String jsonArray = mapper.writeValueAsString(List.of(fileID));
                    SqlConnection.executeInsert(
                            "INSERT INTO encryptedindex (token, file_id, user_id) VALUES (?, ?, ?)",
                            token, jsonArray, uc.getId()
                    );
                } else {
                    String fileIdJson = rs.getString("file_id");
                    List<String> fileList;

                    if (fileIdJson != null && !fileIdJson.isEmpty()) {
                        fileList = mapper.readValue(fileIdJson, new TypeReference<List<String>>() {});
                    } else {
                        fileList = new ArrayList<>();
                    }
                    if (!fileList.contains(fileID)) {
                        fileList.add(fileID);
                        String updatedJson = mapper.writeValueAsString(fileList);
                        SqlConnection.executeUpdate(
                                "UPDATE encryptedindex SET file_id = ? WHERE token = ?",
                                updatedJson, token
                        );
                        System.out.println("üìù ƒê√£ c·∫≠p nh·∫≠t th√™m fileID cho token: " + token);
                    } else {
                        System.out.println("‚ö†Ô∏è Token ƒë√£ ch·ª©a fileID ‚Üí b·ªè qua: " + token);
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("‚ÄºÔ∏è L·ªói trong AddListToken:");
            e.printStackTrace();
        }
    }

    public static String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 2);
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
    public static byte[] fromHexString(String hex) {
        int len = hex.length();
        if (len % 2 != 0) {
            throw new IllegalArgumentException("Chu·ªói hex kh√¥ng h·ª£p l·ªá");
        }

        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        return data;
    }

    private void userSearchToken(User uc, String token) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            Set<String> uniqueFileIDs = new HashSet<>(); // d√πng Set ƒë·ªÉ lo·∫°i tr√πng
            SqlResultSet rs = SqlConnection.executeQuery(
                    "SELECT * FROM encryptedindex WHERE token = ?", token
            );
            while (rs.next()) {
                long userId = rs.getLong("user_id");
                if (userId != uc.getId()) {
                    continue;
                }
                String fileIDJson = rs.getString("file_id");

                // Parse JSON array: v√≠ d·ª• ["abc", "def", "ghi"]
                List<String> fileIDs = mapper.readValue(fileIDJson, new TypeReference<List<String>>() {});

                uniqueFileIDs.addAll(fileIDs); // t·ª± lo·∫°i tr√πng

            }
            if (!uniqueFileIDs.isEmpty()) {
               Service.gI().sendListFileSearch(uc,uniqueFileIDs);
            } else{
                Service.gI().sendMessNotFoundFile(uc);
            }
        } catch (Exception e) {
            System.err.println("‚ÄºÔ∏è L·ªói trong AddListToken:");
            e.printStackTrace();
        }
    }

    private void userDownFile(User uc, String fileID, List<String> tokenList) {
        try {
            System.out.println("üì• userDownFile - fileID: " + fileID);
            System.out.println("üì• userDownFile - token count: " + tokenList.size());
            ObjectMapper mapper = new ObjectMapper();
            for (String token : tokenList) {
                System.out.println("üîé ƒêang ki·ªÉm tra token: " + token);
                SqlResultSet rs = SqlConnection.executeQuery(
                        "SELECT * FROM encryptedindex WHERE token = ?", token
                );
                boolean flag = false;
                while (rs.next() && !flag) {
                    long userId = rs.getLong("user_id");
                    System.out.println("  ‚Ü™ user_id trong DB: " + userId);
                    if (userId != uc.getId()) {
                        System.out.println("  ‚ùå userId kh√¥ng kh·ªõp, b·ªè qua");
                        continue;
                    }
                    String fileIDJson = rs.getString("file_id");
                    System.out.println("  ‚úÖ userId kh·ªõp. file_id JSON: " + fileIDJson);
                    List<String> fileIDs = mapper.readValue(fileIDJson, new TypeReference<List<String>>() {});
                    System.out.println("  üîé Ki·ªÉm tra xem ch·ª©a fileID: " + fileID + " ?");
                    if (fileIDs.contains(fileID)) {
                        System.out.println("  ‚úÖ T√¨m th·∫•y fileID trong danh s√°ch, g·ª≠i file!");
                        flag = true;
                        Service.gI().sendFile(uc, fileID);
                        return;
                    } else {
                        System.out.println("  ‚ùå Kh√¥ng ch·ª©a fileID");
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("‚ÄºÔ∏è L·ªói trong userDownFile:");
            e.printStackTrace();
        }
    }

}
