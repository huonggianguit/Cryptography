package com.sn.SrvFinance.network.session;

import com.sn.SrvFinance.network.handler.IMessageReceiver;
import com.sn.SrvFinance.network.handler.IMessageIO;
import com.sn.SrvFinance.network.io.Message;
import com.sn.SrvFinance.network.io.ScBuf;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Session implements ISession {
    public final SocketChannel channel;
    private final Selector selector;
    public final Queue<ByteBuffer> writeQueue = new LinkedList<>();

    private SessionState sessionState = SessionState.PreLogin;

    private final Queue<Message> messageQueue = new ConcurrentLinkedQueue<>();

    /* Concurrent c√≥ c∆° ch·∫ø  lock-free, d√πng CAS (Compare-And-Swap) ƒë·ªÉ ƒë·∫£m b·∫£o thread safety m√† kh√¥ng c·∫ßn kh√≥a (lock), c∆° ch·∫ø : head: tr·ªè t·ªõi node ƒë·∫ßu (ƒë·ªÉ ƒë·ªçc: poll()),tail: tr·ªè t·ªõi node cu·ªëi (ƒë·ªÉ ghi: offer())
    *Kh√¥ng kh√≥a (synchronized)
    * boolean CAS(address, expectedValue, newValue),N·∫øu *address == expectedValue ‚Üí th√¨ g√°n newValue,Ng∆∞·ª£c l·∫°i ‚Üí KH√îNG l√†m g√¨, return false ‚Üí retry


    +D√πng CAS (Compare-And-Swap) ‚Äì 1 lo·∫°i thao t√°c nguy√™n t·ª≠ ·ªü CPU

    +Cho ph√©p nhi·ªÅu thread c√πng ghi/ƒë·ªçc m√† kh√¥ng ch·∫∑n nhau

    + T∆∞·ªüng: N√≥ nh∆∞ c√°i bƒÉng chuy·ªÅn, ƒë·ªçc l√† l·∫•y ƒë·∫ßu, ghi l√† n√≥ ƒë·∫©y v√†o cu·ªëi (kh√°c synchronized (Block)
    * Kh√°c ch·ªï n√†y m·ªçi theard s·∫Ω dc OS n√≥ qu·∫£n l√Ω trong 1 v√πng n√†o ƒë·∫•y. Khi n√≥ block th√¨ c·∫ßn ch·ªù loop back l·∫°i ƒë·ªÉ m·ªü block, v√† ƒë√¢y s·∫Ω l√† chi ph√≠ swich, t·ªën cost ch·ªï n√†y)
    *  Sun.misc.Unsafe, Ra t·ª´: Java 1.4 (2002).  D√πng n·ªôi b·ªô cho JVM/HotSpot ‚Üí sau ƒë√≥ c·ªông ƒë·ªìng hack ra d√πng lu√¥n,Kh√¥ng public API ‚Üí ph·∫£i "b·∫ª kh√≥a" (getDeclaredField("theUnsafe")‚Ä¶)
    * AtomicXXX, AtomicInteger, AtomicReference,JVM JIT inline CAS Ra t·ª´: Java 1.5 (2004),L√† API ch√≠nh th·ª©c ƒë·∫ßu ti√™n cho l·∫≠p tr√¨nh lock-free,Thu·ªôc java.util.concurrent.atomic, D√πng Unsafe b√™n d∆∞·ªõi ƒë·ªÉ l√†m CAS
    * VarHandle,  Ra t·ª´: Java 9 (2017), Public API, thay th·∫ø Unsafe ch√≠nh th·ª©c, C√≥ h·ªó tr·ª£ compareAndSet, getAndSet, weakCompareAndSet, atomic full,H∆∞·ªõng ƒë·∫øn modularity + clean code + JIT-friendly
    * API c·ªßa java m·ªõi cho n√≥ connect xu·ªëng sanbox real lu√¥n ( ƒëi·ªÅu n√†y gi√∫p n√≥ ƒë·ª° chuy·ªÉn chi ph√≠ qua c√°c sandbox, Unsafe v√† VarHandle ‚Äî "l·ªëi t·∫Øt" t·ª´ JVM xu·ªëng CPU)
    * Trong tr∆∞·ªùng h·ª£p n√†y h√¨nh nh∆∞ th·∫±ng JVM n√≥ qua m·∫∑t c·∫£ OS, n√≥ g·ª≠i xu·ªëng CPU s·ª≠a c·∫•p nguy√™n t·ª≠, v√† CPU s·∫Ω b√°o l·∫°i cho n√≥ s·ª≠a dc hay ko, V√† n·∫øu theard thua(ko s·ª≠a dc ) th√¨ jvm retry l·∫°i
    (Kh√¥ng t·ªën chi ph√≠ swiching)
    * Khi 2 theard c√πng ghi (b·∫•t k·ªÉ 1 theard th·∫Øng hay c√πng l√∫c, Cpu √©p 1 th·∫±ng th·∫Øng), n√≥ s·∫Ω ƒë·ªçc con tr√µ cu·ªëi. Check next xem c√≥ null ko? n·∫øu null th√¨ n√≥ cho ghi, th·∫±ng th·∫Øng dc ghi, th·∫±ng thua retry(while)
    *
     * JVM trong tr∆∞·ªùng h·ª£p d√πng tr√≤ n√†y n√≥ ch·ªâ warp native th√¥i, b·∫£n ch·∫•t v·∫´n l√† sandbox ƒë·ªãa ch·ªâ n√≥ g·ª≠i l√† va(virtual address), cpu t·ª± call mmu c·ªßa OS ƒë·ªÉ l·∫•y address real
    Quy tr√¨nh: OS n√≥ t√πy theo ram n√≥ setup ram r·ªìi c√≥ 1 b·∫£ng Page Table(b·∫£ng √°nh x·∫° ram real), Sandbox nh∆∞ py,c#,jv n√≥ ƒë·ªÅu g·ª≠i va xu·ªëng cpu (mmu, 1 v√πng v·∫≠t l√Ω setup check ƒë·ªãa ch·ªâ, ng∆∞·ªùi ƒë·ªçc b·∫£n ƒë·ªì)
     xong cpu n√≥ s·∫Ω tra catch (n√≥ c√≥ catch l·∫°i ƒë·ªãa ch·ªâ d√πng g·∫ßn ƒë√¢y) ho·∫∑c n√≥ tra tr√™n PA ƒë·ªÉ t√¨m dc ƒë·ªãa ch·ªâ trong ram) n·∫øu l·ªói g·ªçi OS x·ª≠ l√Ω (page fault)
     +Trong Page Table Entry (PTE) ch·ª©a permission flags (Readable,Writable,Executable,User/Supervisor), MMU tra PTE ,N·∫øu permission kh√¥ng h·ª£p l·ªá, MMU g√¢y trap v·ªÅ OS:

     */
    @Override
    public Queue<Message> getMessageQueue() {
        return messageQueue;
    }

    private IMessageReceiver messageReceiver;

    private ScBuf bufferReader;
    private ScBuf bufferWriter;
    private int sizeBuffer;
    /* Kh√°c v·ªõi IO l√∫c tr∆∞·ªõc m·ªói Session ph·∫£i c√≥ 1 t·ªõi 2 Theard ƒë·ªÉ x·ª≠ l√Ω khi nh·∫≠n raw t·ª´ Socket v√† khi ƒë·∫©y raw xu·ªëng Socket
    + Gi·ªù d√πng 1 k√™nh t·ªïng gI() ƒë·ªÉ handler cho m·ªçi Seesion khi nh·∫≠n v√† ghi.
    + ƒêo·∫°n n√†y g√°n 2 th√†nh ph·∫ßn n√†y d·∫°ng Interface ƒë·ªÉ c√≥ th·ªÉ t√πy ch·ªânh Class x·ª≠ l√Ω trong tr∆∞·ªùng h·ª£p to√†n b·ªô Network dc g√≥i th√†nh lib
    */
    public ScBuf getBufferReader() {
        return bufferReader;
    }

    public ScBuf getBufferWriter() {
        return bufferWriter;
    }

    public ISession SetBufferSize(int size) {
        sizeBuffer = size;
        return this;
    }

    public TypeSession typeSession;
    private boolean isHandlerRead;
    private boolean isHandlerWrite;

    public Session(SocketChannel channel, Selector selector) {
        this.channel = channel;
        this.selector = selector;
        this.bufferReader= new ScBuf(channel,this);
        this.bufferWriter= new ScBuf(channel,this);
    }

    public TypeSession getTypeSession() {
        return this.typeSession;
    }

    public void initThreadSession() {

    }

    public ISession setMessageIO(IMessageIO messageIO) {
        return this;
    }

    public ISession setMessageReceiver(IMessageReceiver param) {
        messageReceiver = param;
        return this;
    }

    public void setSessionState(SessionState param) {
        sessionState = param;
    }
    public SessionState getSessionState(){
        return sessionState;
    }

    public IMessageReceiver getMessageReceiver() {
        return messageReceiver;
    }

    public ISession setMessageHandler() {
        return this;
    }

    public ISession startSend() {
        return this;
    }

    public ISession startCollect() {
        return this;
    }

    public ISession start() {
        return this;
    }

    public ISession setReconnect(boolean flag) {
        return this;
    }

    public void reconnect() {

    }

    public boolean getIsHandlerRead() {
        return isHandlerRead;
    }

    public void setIsHandlerRead(boolean flag) {
        isHandlerRead = flag;
    }

    public boolean getIsHandlerWrite() {
        return isHandlerWrite;
    }

    public void setIsHandlerWrite(boolean flag) {
        isHandlerWrite = flag;
    }

    public String getIP() {
        return "";
    }

    public boolean isConnected() {
        return false;
    }

    public long getID() {
        return 0;
    }

    public void addMessage(Message msg) {
        msg.prepareToRead();
        messageQueue.add(msg);
        SelectionKey key = channel.keyFor(selector); // üëà l·∫•y SelectionKey ƒëang li√™n k·∫øt socket
        if (key != null && key.isValid()) {
            int interestOps = key.interestOps();
            if ((interestOps & SelectionKey.OP_WRITE) == 0) {
                // üëá Th√™m OP_WRITE n·∫øu ch∆∞a c√≥
                key.interestOps(interestOps | SelectionKey.OP_WRITE);
                selector.wakeup(); // üëà ƒë√°nh th·ª©c selector n·∫øu ƒëang block
            }
        }
    }

    public void writeToBuffer(Message msg) {
        try {
            int maxToRead = bufferWriter.remaining();
         //   System.out.println("[writeToBuffer] bufferWriter.remaining(): " + maxToRead);

            byte[] temp = msg.readBytes(maxToRead);
          //  System.out.println("[writeToBuffer] ƒê·ªçc " + temp.length + " byte t·ª´ message");

            if (temp.length > 0) {
                int written = bufferWriter.writeBytes(temp);
             //   System.out.println("[writeToBuffer] ƒê√£ ghi " + written + " byte v√†o bufferWriter");
            }

            int left = msg.availableRead();
          //  System.out.println("[writeToBuffer] D·ªØ li·ªáu c√≤n l·∫°i trong message: " + left + " byte");

            if (left == 0) {
                messageQueue.poll();
                msg.close();
            //    System.out.println("[writeToBuffer] ƒê√£ ƒë·ªçc xong message, ƒë√≥ng v√† lo·∫°i kh·ªèi h√†ng ƒë·ª£i");
            }
        } catch (Exception e) {
            System.err.println("[writeToBuffer] L·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void doSendMessage(Message paramMessage) {
    }

    public void disconnect() {
        try {
            SelectionKey key = channel.keyFor(selector);
            if (key != null) {
                key.cancel(); // H·ªßy l·∫Øng nghe selector cho session n√†y
            }
            if (channel.isOpen()) {
                channel.close(); // üëà hu·ª∑ socket kernel ‚Üí client b·ªã disconnect th·∫≠t
            }


            dispose(); // D·ªçn d·∫πp b·ªô nh·ªõ

        } catch (IOException e) {
            e.printStackTrace(); // Ho·∫∑c log l·ªói
        }
    }

    public void dispose() {
        messageQueue.clear();       // X√≥a h√†ng ƒë·ª£i tin nh·∫Øn
        writeQueue.clear();         // X√≥a h√†ng ƒë·ª£i ghi
        bufferReader = null;        // D·ªçn buffer
        bufferWriter = null;
        messageReceiver = null;     // X√≥a handler
        typeSession = null;
        sessionState = null;

        // C·ªù tr·∫°ng th√°i
        isHandlerRead = false;
        isHandlerWrite = false;
    }

    public int getNumMessages() {
        return 0;
    }

    // G·ª≠i message: ƒë·∫©y v√†o queue v√† g·ªçi flush
    public void send(ByteBuffer buffer, SelectionKey key) throws IOException {
        writeQueue.add(buffer);
        tryFlush(key);
    }

    // Flush queue ‚Üí ghi tu·∫ßn t·ª±, kh√¥ng ƒë∆∞·ª£c tr·ªôn
    public void tryFlush(SelectionKey key) throws IOException {
        while (!writeQueue.isEmpty()) {
            ByteBuffer buf = writeQueue.peek();
            int written = channel.write(buf);

            if (buf.hasRemaining()) {
                // Buffer ghi ch∆∞a h·∫øt, ch·ªù OP_WRITE l·∫ßn sau
                key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
                return;
            }

            writeQueue.poll(); // Ghi xong th√¨ x√≥a kh·ªèi queue
        }

        // Ghi h·∫øt r·ªìi ‚Üí b·ªè OP_WRITE ƒë·ªÉ kh√¥ng spam select()
        key.interestOps(key.interestOps() & ~SelectionKey.OP_WRITE);
    }
}
